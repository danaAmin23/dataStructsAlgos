import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {
    
    /*
1.6 String Compression: Implement a method to perform basic string compression using the counts
of repeated characters. For example, the string aabcccccaaa would become a2blc5a3, If the
"compressed" string would not become smaller than the original string, your method should return
the original string. You can assume the string has only uppercase and lowercase letters (a - z).
Hints: #92, if 110 
 */

    public static String compressedString(String a) {

                //loop through string 
                int consecutiveCount = 0;
                String compressed = "";
                for(int i=0;i<a.length();i++){
                    
                    consecutiveCount++;
                    
                    
                        //while  in bounds check if current char != next char 
                        if(i+1>=a.length()||a.charAt(i)!=a.charAt(i+1)){
                           
                                compressed+="" + a.charAt(i) + "" +consecutiveCount; 
                            
                                //reset count 
                            consecutiveCount = 0;
                        }
                    
                    
                    
                    
                }//end for 

        //if the compressed string is longer than input string return input 
        
      return  compressed.length() > a.length() ? a : compressed  ;


            

    }//end isOneEditAway
    
    
}// end result 

public class Solution {
    public static void main(String[] args) throws IOException {        
       System.out.println(Result.compressedString("aabcccccaaa"));

    }
}
